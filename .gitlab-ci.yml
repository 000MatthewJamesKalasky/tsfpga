# Instructions here: https://docs.gitlab.com/ee/ci/yaml/
# Linter here: https://gitlab.com/truestream/tsfpga/-/ci/lint

stages:
  - test
  - build_documentation
  - deploy


default:
  # Use docker image from ghdl project
  # Available at https://hub.docker.com/r/ghdl/ext/
  # Configured at https://github.com/ghdl/docker/tree/master/dockerfiles
  image: ghdl/ext:ls-vunit
  before_script:
    - python3 --version
    - export PYTHONPATH=$(pwd)/tsfpga
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_BRANCH
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_REF_NAME


pytest:
  stage: test
  rules:
    - when: always
  script:
    - apt-get update -qq > /dev/null
    - apt-get install -y -qq git g++ > /dev/null
    - python3 -m pip install --requirement requirements_develop.txt > /dev/null
    - python3 -m pylint --version
    - python3 -m pycodestyle --version
    - python3 -m pytest -v --cov tsfpga --cov-report xml:generated/pytest_coverage.xml --cov-report html:generated/pytest_coverage_html --ignore=tsfpga/test/vivado/ tsfpga/
  artifacts:
    paths:
      - generated/pytest_coverage.xml
      - generated/pytest_coverage_html


simulate:
  stage: test
  rules:
    - when: always
  script:
    - python3 -m pip install --requirement requirements_develop.txt > /dev/null
    - ghdl --version
    - python3 examples/simulate.py --num-threads 4 --vivado-skip


build_pypi:
  stage: test
  rules:
      - when: always
  script:
    - apt-get update -qq > /dev/null
    - apt-get install -y -qq git > /dev/null
    - python3 setup.py sdist
  artifacts:
    paths:
      - dist


build_pages:
  # Uses artifacts from the pytest job in the previous stage
  stage: build_documentation
  rules:
    - when: always
  script:
    - apt-get update -qq > /dev/null
    - apt-get install -y -qq git > /dev/null
    - python3 -m pip install --requirement requirements_develop.txt > /dev/null
    - python3 tools/build_sphinx_docs.py
  artifacts:
    paths:
      - generated/sphinx_html


deploy_pypi:
  # Deploy artifacts from the build_pypi job run in the previous stage
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: on_success
  variables:
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: $PYPI_API_TOKEN
  script:
    - apt-get update -qq > /dev/null
    - apt-get install -y -qq git > /dev/null
    - python3 -m pip install --requirement requirements_develop.txt > /dev/null
    - python3 tools/verify_release.py
    - python3 -m twine upload dist/*


pages:
  # Job name "pages" is magic in gitlab. Will deploy content of the "public" folder to the website.
  # Deploy artifacts from the build_pages job run in the previous stage
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
  script:
    - mv generated/sphinx_html public
  artifacts:
    paths:
      - public
